The Core Functions are the only things available if you don't use
start_lib_basics or start_lib_game. BooBoo calls start_lib_basics and
BooBooGame calls both, but if you use BooBoo as a library, it's up to
you. The Core Functions are non-optional.

-- Core Functions ------------------------------------------------------------

number
	define a number
	e.g. number x

string
	define a string
	e.g. string s

vector
	define a vector
	e.g. vector x

reset
	load a different BooBoo script
	e.g. reset "next_slide.boo"

exit
	Exit the app with a return code to the environment
	e.g. exit 0

return
	Return a value from a function
	e.g. return 1

include
	Include a BooBoo file at this point in the code
	e.g. include "my_functions.inc"

:
	Define a label
	e.g. :jump_here

;
	Define a comment
	e.g. = x 1 ; assign 1 to x

""
	a string
	e.g. = name "Pelvis Johnson"

function
	define a function
	e.g. function foo param1 param2 { ... }

-- Flow Control --------------------------------------------------------------

goto
	jump to a label
	e.g. goto next_loop

?
	Comparison
	e.g. ? x 1

je
	Jumps like this one are based on the last comparison. If it was equal, this
	will jump, if not, it won't
	e.g. je process_x_equals_1

jne
	Jump if not equal
	e.g. jne process_x_not_1

jl
	Jump if less
	e.g. jl my_label

jle
	Jump if less or equal
	e.g. jle my_label

jg
	Jump if greater
	e.g. jg my_label

jge
	Jump if greater or equal
	e.g. jge my_label

call
	Call a function that doesn't return anything
	e.g. call my_func param1 param2 param2

call_result
	Call a function that returns a value
	e.g. call_result result my_func param1 param2

-- Arithmetic ----------------------------------------------------------------

=
	assign
	e.g. = x 1

+
	add
	e.g. + x 1

-
	subtract
	e.g. - x 1

*
	multiply
	e.g. * x 2

/
	divide
	e.g. / x 2

%
	integer modulus
	e.g. % index count

-- String Functions ------------------------------------------------------------

string_format
	format strings with replacements
	e.g. string_format dest "I'm % years old" age

string_char_at
	Get the value of character at index in a string
	e.g. string_char_at dest str index

string_length
	Get the length of a string
	e.g. string_length dest str

string_from_number
	Turns the ascii value into a one character length string
	e.g. string_from_number str 97 ; creates "a"

-- Math Functions ------------------------------------------------------------

fmod
	floating point modulus
	e.g. fmod x 1.5

sin
	trigonometry functions
	e.g. sin dest 3.14159

cos
	trigonometry functions
	e.g. cos dest 3.14159

atan2
	trigonometry functions
	e.g. atan2 y x

abs
	absolute value
	e.g. abs dest value

pow
	exponentiation
	e.g. pow x 2

sqrt
	square root
	e.g. sqrt x

-- Vector Functions ----------------------------------------------------------

vector_add
	push a value onto a vector (must be created e.g. var vector v)
	e.g. vector_add v 0

vector_size
	get the number of elements in a vector
	e.g. vector_size vec size

vector_set
	set an element in a vector
	e.g. vector_set vec index value

vector_insert
	insert a value in any position in a vector
	e.g. vector_insert v index value

vector_get
	get the value at index in vector
	e.g. vector_get v output index

vector_erase
	remove from a vector
	e.g. vector_erase v index

vector_clear
	empty a vector
	e.g. vector_clear v

-- Other ---------------------------------------------------------------------

print
	print a string (like string_format)
	e.g. print "Hello, I'm % and I like % and %" name like1 like2

int
	Drop the fractional part of a number
	e.g. int x

neg
	Invert the sign of a number
	e.g. neg x
